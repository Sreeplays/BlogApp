let hash,sign,Schema,model;_e9e‍.x([["default",()=>_e9e‍.o]]);_e9e‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}]]);_e9e‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}]]);_e9e‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}],["model",["model"],function(v){model=v}]]);


const userSchema = new Schema(
  {
    avatar: { type: String, default: "" },
    name: { type: String, required: true },
    email: { type: String, required: true },
    password: { type: String, required: true },
    verified: { type: Boolean, default: false },
    verificationCode: { type: String, required: false },
    admin: {type: Boolean, default: false}
  },
  { timestamps: true }
);

userSchema.pre('save', async function(next) {
    if (this.isModified('password')) {
        this.password = await hash(this.password, 10)
        return next();
    }
    return next();
})
userSchema.methods.generateJWT = async function() {
    return await sign({id: this._id}, process.env.JWT_SECRET, {expiresIn: '30d'})
}

const user = model("user", userSchema)
_e9e‍.d(user);